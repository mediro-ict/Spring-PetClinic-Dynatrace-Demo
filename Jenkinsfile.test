#!/usr/bin/env groovy
def dockerImage
/*
def specfile = '''{
  "lowerLimit": 1,
  "upperLimit": 4,
  "_comment": "global configuration environment-wide",
  "timeseries": [
    {
      "timeseriesId": "com.dynatrace.builtin:service.responsetime",
      "aggregation": "avg",
      "tags": "Frontend",
      "lowerLimit": 250000,
      "upperLimit": 1000000
    },
    {
      "timeseriesId": "com.dynatrace.builtin:service.responsetime",
      "aggregation": "avg",
      "entityIds": "SERVICE-65778F58A66834D8",
      "lowerLimit": 4000000,
      "upperLimit": 8000000
    },
    {
      "timeseriesId": "com.dynatrace.builtin:docker.container.cpu",
      "aggregation": "avg",
      "lowerLimit": 50,
      "upperLimit": 70
    },
    {
      "timeseriesId": "com.dynatrace.builtin:service.failurerate",
      "aggregation": "avg",
      "lowerLimit": 0,
      "upperLimit": 35
    },
    {
      "timeseriesId": "com.dynatrace.builtin:service.requestspermin",
      "aggregation": "min",
      "lowerLimit": 5,
      "upperLimit": 2
    },
    {
      "timeseriesId": "com.dynatrace.builtin:docker.container.memory",
      "aggregation": "avg",
      "lowerLimit": 1600000000,
      "upperLimit": 1700000000
    },
    {
      "timeseriesId": "com.dynatrace.builtin:docker.container.running",
      "aggregation": "avg",
      "lowerLimit": 3,
      "upperLimit": 4
    },
    {
      "timeseriesId": "com.dynatrace.builtin:host.mem.used",
      "aggregation": "avg",
      "lowerLimit": 3200000000,
      "upperLimit": 4000000000
    },
    {
      "timeseriesId": "com.dynatrace.builtin:app.custom.apdex",
      "aggregation": "count",
      "lowerLimit": 3,
      "upperLimit": 4
    },
    {
      "timeseriesId": "com.dynatrace.builtin:appmethod.apdex",
      "aggregation": "count",
      "lowerLimit": 3,
      "upperLimit": 4
    }
  ]
}'''

sh 'echo ' + specfile + ' > test.json'

sh 'echo test.json */


def tagMatchRules = [
        [
                meTypes: [
                        [meType: 'SERVICE']
                ],
                tags   : [
                        [context: 'CONTEXTLESS', key: 'Frontend']
                ]
        ], [
                meTypes: [
                        [meType: 'SERVICE']
                ],
                tags   : [
                        [context: 'CONTEXTLESS', key: 'Database']
                ]
        ]

        
]

pipeline {
    environment {
    registry = "leonvzd/spring-petclinic:latest"
    registryCredential = 'dockerHubCredentials'
    dockerImage = ''
  }
    agent {
        label 'docker'
    }
    options {
        ansiColor('xterm')
        timestamps()
        timeout(30)
        disableConcurrentBuilds()
        buildDiscarder logRotator(numToKeepStr: '5')
    }
    triggers {
        cron '@daily'
    }

    stages {
        stage('Maven Build') {
            steps {
                script {
                    docker.image('maven:3-jdk-8-slim').inside {
                        sh 'mvn clean package --batch-mode'
                    }
                }
//                publishCoverage adapters: [jacocoAdapter('target/jacoco.exec')]
//                findbugs pattern: '**/target/findbugsXml.xml'
//                checkstyle pattern: '**/target/checkstyle-result.xml'
//                junit allowEmptyResults: true, testResults: '**/target/surefire-reports/**/*.xml'
                archiveArtifacts artifacts: '**/target/*.jar,**/target/*.war', fingerprint: true
            }
        }
        stage('Docker Build') {
            steps {
                script {
                    dockerImage = docker.build registry
                }
            }
        }
        stage('Deploy to Staging Server') {
            steps {
             //   createDynatraceDeploymentEvent(envId: 'cloud', tagMatchRules: tagMatchRules) {
                    createDynatraceDeploymentEvent(entityIds:[[$class: 'Service']],envId: 'cloud', tagMatchRules: [[meTypes: [[meType: 'SERVICE']], tags: [[context: 'CONTEXTLESS', key: 'Frontend']]], [meTypes: [[meType: 'SERVICE']], tags: [[context: 'CONTEXTLESS', key: 'Database']]]]) {
                        sh 'docker-compose down'
                        sh 'docker-compose up -d'
                    }
           
            }
        }
        stage('Performance Test') {
            steps {
                recordDynatraceSession(entityIds: [[$class: 'Application', entityId: 'APPLICATION-EA7C4B59F27D43EB'], [$class: 'Service', entityId: 'SERVICE-6D8644AEFD7A7A5D']], envId: 'cloud', testCase: 'loadtest') {
                //    performanceTest(readFile('performanceTest.json'))
                     bzt "blaze.yml"
                }
                perfSigDynatraceReports envId: 'cloud', specFile: 'specfile.json', nonFunctionalFailure: 2
            }
        }
       /** stage('Docker Push') {
            steps {
                 echo 'Docker Push!'
                 script {
                    docker.withRegistry('', registryCredential) {
                        dockerImage.push()
                    }
                } 
            }
        } **/
       /** stage('deploy to Production') {
            steps {
                echo 'deploy to Production!'
            }
        } **/
    }
    post {
        always {
          echo 'done!'  
//          step([$class: 'Mailer', notifyEveryUnstableBuild: true, recipients: 'notify@me', sendToIndividuals: false])
        }
    }
}