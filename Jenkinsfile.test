#!/usr/bin/env groovy

 //parameters: [file(name: "$workspace/testMatchRules.txt")]

 
import groovy.json.JsonSlurperClassic
def dockerImage


//env.tagMatchRules

//def tagMatchRules = Eval.me(params.tagMatchRules)

//def tagMatchRule = readFile('$workspace/testMatchRules.txt')
//def tagMatchRules 
 /*[
    [
        meTypes: [
            [meType: 'SERVICE']
        ], 
            tags: [
                [context: 'CONTEXTLESS', key: 'servername', value: 'Tomcat/localhost']
            ]
    ]
]*/


pipeline {



    environment {
    registry = "leonvzd/spring-petclinic:latest"
    registryCredential = 'dockerHubCredentials'
    dockerImage = ''
    def tagMatchRules = readFile('testMatchRules.txt')

  }
    agent {
        label 'docker'
    }
    options {
        ansiColor('xterm')
        timestamps()
        timeout(30)
        disableConcurrentBuilds()
        buildDiscarder logRotator(numToKeepStr: '10')
    }
    triggers {
        cron '@daily'
    }

    stages {

        stage('Create Dynatrace Tags'){
         /*This stage is to make sure the performance signature plugin targets the correct services being tested by the gatling scripts
         The stage will connect to the Dynatrace API check that the services being tested from the SIMULATION_SERVICES job parameter are 
         tagged with the Jenkins Jobname. If the Tag does not exist it will tag the service specified with the Jenkins Jobname.
         */
        steps {
        
        
        //foo = readJSON text: foo_json
            
        //response = httpRequest acceptType: 'APPLICATION_JSON', contentType: 'APPLICATION_JSON', httpMode: 'PATCH', requestBody: "$foo_json", url: "https://api.github.com/orgs/balls"
        
         
         script{
          bodString = '{"tags": ["asdasdasd"]}'
          class_tag = env.SIMULATION_CLASS
          foo_json = """
                 {"tags": [
                  "$class_tag"
                  ]}
                 """    
         String[] serviceSplit = env.SIMULATION_SERVICES.split(",")
         for (int i = 0; i < serviceSplit.size(); i++) {
       
    
         encodedString = URLEncoder.encode(serviceSplit[i], "UTF-8")    

         services = httpRequest acceptType: 'APPLICATION_JSON', contentType: 'APPLICATION_JSON', customHeaders: [[maskValue: true, name: 'Authorization', value: 'Api-Token HVV-Ubw-QDudjy0WadMLB']], responseHandle: 'STRING', url: "https://hky02010.live.dynatrace.com/api/v1/entity/services?tag=${encodedString}&includeDetails=false"

         println services.getContent()
         list = new JsonSlurperClassic().parseText( services.getContent() )

         // Print them out to make sure
        list.each { println it }
        
        entity_id = list.entityId
        def jsonObj = readJSON text: services.getContent()
        println(jsonObj.entityId)
        List tags = list.tags
        tags.each { println it }
        testenv = tags.key.contains("Test")
        println(tags.key)
        println(testenv)
        if (tags.contains(env.SIMULATION_CLASS)){
         
         println("Simulation Class found")
         
        } 
        else {
            println(foo_json) 
           // response = httpRequest consoleLogResponseBody: true, contentType: 'APPLICATION_JSON', httpMode: 'POST', requestBody: body, url: "https://${host}", validResponseCodes: '200'
        def createTag = httpRequest contentType: 'APPLICATION_JSON_UTF8', customHeaders: [[maskValue: true, name: 'Authorization', value: 'Api-Token HVV-Ubw-QDudjy0WadMLB']], httpMode: 'POST', requestBody: foo_json, responseHandle: 'STRING', url: "https://hky02010.live.dynatrace.com/api/v1/entity/services/${entity_id[0]}"

        }

        println(tags)   


         }
         }
         }
        }
        stage('Maven Build') {
            steps {
                script {
                    docker.image('maven:3-jdk-8-slim').inside {
                        sh 'mvn clean package --batch-mode'
                    }
                }
//                publishCoverage adapters: [jacocoAdapter('target/jacoco.exec')]
//                findbugs pattern: '**/target/findbugsXml.xml'
//                checkstyle pattern: '**/target/checkstyle-result.xml'
//                junit allowEmptyResults: true, testResults: '**/target/surefire-reports/**/*.xml'
                archiveArtifacts artifacts: '**/target/*.jar,**/target/*.war', fingerprint: true
            }
        }
        stage('Docker Build') {
            steps {
                script {
                    dockerImage = docker.build registry
                }
            }
        }
        stage('Deploy to Staging Server') {
            steps {
               
                
                script {
             //   createDynatraceDeploymentEvent(envId: 'cloud', tagMatchRules: tagMatchRules) {
                    createDynatraceDeploymentEvent(envId: 'cloud', tagMatchRules:Eval.me("${env.tagMatchRules}")) {
                        //sh 'docker-compose down'
                        sh 'docker-compose up -d'
                    }
                }
            }
        }
        
        stage('Performance Test') {
            steps {

                script {
                recordDynatraceSession(envId: 'cloud', testCase: 'loadtest',tagMatchRules:Eval.me("${env.tagMatchRules}")) {
                //    performanceTest(readFile('performanceTest.json'))
                     bzt "blaze.yml"
                }
                perfSigDynatraceReports envId: 'cloud', specFile: 'specfile.json', nonFunctionalFailure: 2
                }  
            }
        }
       /** stage('Docker Push') {
            steps {
                 echo 'Docker Push!'
                 script {
                    docker.withRegistry('', registryCredential) {
                        dockerImage.push()
                    }
                } 
            }
        } **/
       /** stage('deploy to Production') {
            steps {
                echo 'deploy to Production!'
            }
        } **/
    }
   
}
