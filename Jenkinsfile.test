#!/usr/bin/env groovy

 //parameters: [file(name: "$workspace/testMatchRules.txt")]

 

def dockerImage


//env.tagMatchRules

//def tagMatchRules = Eval.me(params.tagMatchRules)

//def tagMatchRule = readFile('$workspace/testMatchRules.txt')

def tagMatchRule 
 /*[
    [
        meTypes: [
            [meType: 'SERVICE']
        ], 
            tags: [
                [context: 'CONTEXTLESS', key: 'servername', value: 'Tomcat/localhost']
            ]
    ]
]*/

pipeline {
    environment {
    registry = "leonvzd/spring-petclinic:latest"
    registryCredential = 'dockerHubCredentials'
    dockerImage = ''
    tagMatchRule = readFile('testMatchRules.txt')

  }
    agent {
        label 'docker'
    }
    options {
        ansiColor('xterm')
        timestamps()
        timeout(30)
        disableConcurrentBuilds()
        buildDiscarder logRotator(numToKeepStr: '10')
    }
    triggers {
        cron '@daily'
    }

    stages {
        stage('Maven Build') {
            steps {
                script {
                    docker.image('maven:3-jdk-8-slim').inside {
                        sh 'mvn clean package --batch-mode'
                    }
                }
//                publishCoverage adapters: [jacocoAdapter('target/jacoco.exec')]
//                findbugs pattern: '**/target/findbugsXml.xml'
//                checkstyle pattern: '**/target/checkstyle-result.xml'
//                junit allowEmptyResults: true, testResults: '**/target/surefire-reports/**/*.xml'
                archiveArtifacts artifacts: '**/target/*.jar,**/target/*.war', fingerprint: true
            }
        }
        stage('Docker Build') {
            steps {
                script {
                    dockerImage = docker.build registry
                }
            }
        }
        stage('Deploy to Staging Server') {
            steps {
             //   createDynatraceDeploymentEvent(envId: 'cloud', tagMatchRules: tagMatchRules) {
                    createDynatraceDeploymentEvent(envId: 'cloud', tagMatchRules: tagMatchRules) {
                        //sh 'docker-compose down'
                        sh 'docker-compose up -d'
                    }
           
            }
        }
        stage('Performance Test') {
            steps {
                recordDynatraceSession(envId: 'cloud', testCase: 'loadtest',tagMatchRules: tagMatchRules) {
                //    performanceTest(readFile('performanceTest.json'))
                     bzt "blaze.yml"
                }
                perfSigDynatraceReports envId: 'cloud', specFile: 'specfile.json', nonFunctionalFailure: 2
            }
        }
       /** stage('Docker Push') {
            steps {
                 echo 'Docker Push!'
                 script {
                    docker.withRegistry('', registryCredential) {
                        dockerImage.push()
                    }
                } 
            }
        } **/
       /** stage('deploy to Production') {
            steps {
                echo 'deploy to Production!'
            }
        } **/
    }
    post {
        always {
          echo 'done!'  
//          step([$class: 'Mailer', notifyEveryUnstableBuild: true, recipients: 'notify@me', sendToIndividuals: false])
        }
    }
}